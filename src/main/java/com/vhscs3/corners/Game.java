/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.vhscs3.corners;

import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author mattanpaluy
 */
public class Game extends javax.swing.JFrame {

    /**
     * Creates new form Game
     */
    private Board game;
    private boolean state;
    private int startX = -1;
    private int startY = -1;
    public Game() {
        initComponents();
        win_dialog.setVisible(false);
    }
        
       
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        win_dialog = new javax.swing.JDialog();
        win_textField = new javax.swing.JTextField();
        menu_button = new javax.swing.JButton();
        newGame_win_button = new javax.swing.JButton();
        newGame_button = new javax.swing.JButton();
        Board_panel = new com.vhscs3.corners.BoardGraphicPanel();
        endGame_button = new javax.swing.JButton();

        win_dialog.setAlwaysOnTop(true);
        win_dialog.setBackground(new java.awt.Color(102, 153, 255));
        win_dialog.setMinimumSize(new java.awt.Dimension(400, 300));

        win_textField.setEditable(false);
        win_textField.setBackground(new java.awt.Color(102, 153, 255));
        win_textField.setFont(new java.awt.Font("Impact", 0, 48)); // NOI18N
        win_textField.setForeground(new java.awt.Color(255, 255, 204));
        win_textField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        win_textField.setText("White WINS");
        win_textField.setDisabledTextColor(new java.awt.Color(255, 255, 204));

        menu_button.setBackground(new java.awt.Color(51, 51, 255));
        menu_button.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        menu_button.setForeground(new java.awt.Color(255, 255, 204));
        menu_button.setText("Main Menu");

        newGame_win_button.setBackground(new java.awt.Color(51, 51, 255));
        newGame_win_button.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        newGame_win_button.setForeground(new java.awt.Color(255, 255, 204));
        newGame_win_button.setText("New Game");

        javax.swing.GroupLayout win_dialogLayout = new javax.swing.GroupLayout(win_dialog.getContentPane());
        win_dialog.getContentPane().setLayout(win_dialogLayout);
        win_dialogLayout.setHorizontalGroup(
            win_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(win_dialogLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(win_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(win_dialogLayout.createSequentialGroup()
                        .addComponent(newGame_win_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(menu_button))
                    .addComponent(win_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        win_dialogLayout.setVerticalGroup(
            win_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(win_dialogLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(win_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(win_dialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(menu_button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newGame_win_button, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 950));
        setResizable(false);

        newGame_button.setText("draw board");
        newGame_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGame_buttonActionPerformed(evt);
            }
        });

        Board_panel.setLocation(new java.awt.Point(-32767, -32767));
        Board_panel.setPreferredSize(new java.awt.Dimension(750, 750));
        Board_panel.setSize(new java.awt.Dimension(750, 750));
        Board_panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                Board_panelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout Board_panelLayout = new javax.swing.GroupLayout(Board_panel);
        Board_panel.setLayout(Board_panelLayout);
        Board_panelLayout.setHorizontalGroup(
            Board_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );
        Board_panelLayout.setVerticalGroup(
            Board_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );

        endGame_button.setText("erase board");
        endGame_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endGame_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(newGame_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Board_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endGame_button))
                .addContainerGap(126, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newGame_button)
                    .addComponent(endGame_button))
                .addGap(35, 35, 35)
                .addComponent(Board_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(122, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newGame_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGame_buttonActionPerformed
        Board game = new Board();
        this.game = game;
        state = true;
        ((BoardGraphicPanel) Board_panel).processData(this.game, state);
        
    }//GEN-LAST:event_newGame_buttonActionPerformed

    private void endGame_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endGame_buttonActionPerformed
        state = false;
        ((BoardGraphicPanel) Board_panel).processData(game, state);
    }//GEN-LAST:event_endGame_buttonActionPerformed

    private void Board_panelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Board_panelMousePressed
        int mouseX = locationCalc(evt.getX());
        int mouseY = locationCalc(evt.getY());
        
        if (startX == -1 || startY == -1){
            //if current square is empty and the piece you picked is yours 
            if(game.getSquare(mouseX, mouseY).getPiece() != null)
                
                if (game.getTurn() == type.white && game.getSquare(mouseX, mouseY).getPiece().getSide()){
                    startX = mouseX;
                    startY = mouseY;
                    game.setSelectedX(startX);
                    game.setSelectedY(startY);
                    //show leagal moves
                    ((BoardGraphicPanel) Board_panel).processData(this.game, state);
                }
                else if (game.getTurn() == type.black && game.getSquare(mouseX, mouseY).getPiece().getSide() == false) {
                    startX = mouseX;
                    startY = mouseY;
                    game.setSelectedX(startX);
                    game.setSelectedY(startY);
                    ((BoardGraphicPanel) Board_panel).processData(this.game, state);
                }
            //run check/show leagal move
        }else {
            //if(leagal move)
            gameMove(mouseX, mouseY);
            
            //check if someone won
            type win = gameWon();
            if(win != type.neutral){
                if(win == type.white){
                    System.out.println("white wins");
                    win_textField.setText("WHITE WINS");
                    win_dialog.setVisible(true);
                }else{
                    System.out.println("black wins");
                    win_textField.setText("BLACK WINS");
                    win_dialog.setVisible(true);
                }
            }
            //render
            ((BoardGraphicPanel) Board_panel).processData(this.game, state);
        }
    }//GEN-LAST:event_Board_panelMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Board_panel;
    private javax.swing.JButton endGame_button;
    private javax.swing.JButton menu_button;
    private javax.swing.JButton newGame_button;
    private javax.swing.JButton newGame_win_button;
    private javax.swing.JDialog win_dialog;
    private javax.swing.JTextField win_textField;
    // End of variables declaration//GEN-END:variables
    private int locationCalc(int cordinate){
        if(cordinate > 55 || cordinate <  695){
            
            if(cordinate > 615)
                return 7;
            else if (cordinate > 535)
                return 6;
            else if (cordinate > 455)
                return 5;
            else if (cordinate > 375)
                return 4;
            else if (cordinate > 295)
                return 3;
            else if (cordinate > 215)
                return 2;
            else if (cordinate > 135)
                return 1;
            else if (cordinate > 55)
                return 0;
        }
        return -1;
    }

    private void gameMove(int endX, int endY) {
        
        //start Square clean
        Square start = game.getSquare(startX, startY);
        Piece piece = start.getPiece();
        start.setPiece(null);
        game.setSquare(start, startX, startY);
        //end Square push
        Square end = game.getSquare(endX, endY);
        end.setPiece(piece);
        game.setSquare(end, endX, endY);
         
        //clear current move log and change to next move
        startX = -1;
        startY = -1;
        game.setSelectedX(startX);
        game.setSelectedY(startY);
        if(game.getTurn() == type.white)
            game.setTurn(type.black);
        else if(game.getTurn() == type.black)
            game.setTurn(type.white);
    }
    private boolean leagalMove(int endX, int endY){
        Square endSquare = game.getSquare(endX, endY);
        if(endSquare.getPiece() == null){
            
        }
        return false;
    }
    
    private type gameWon(){
        final int winCondition = 9;
        int white = 0;
        int black = 0;
        for(int row = 0; row < 3; row++){
            for(int collum = 5; collum < 8; collum++){
                Square curr = game.getSquare(row, collum);
                if(curr.getPiece() != null){
                    if(curr.getPiece().getSide() == false){
                        black++;
                    }
                }
            }
        }
        for(int row = 5; row < 8; row++){
            for(int collum = 0; collum < 3; collum++){
                Square curr = game.getSquare(row, collum);
                if(curr.getPiece() != null){
                    if(curr.getPiece().getSide()){
                        white++;
                    }
                }
            }
        }
        if (white == winCondition)
            return type.white;
        else if (black == winCondition)
            return type.black;
        return type.neutral;
    }  
}
